plt0 config v1.0
Layout (change next line with one of these: "All", "Auto", "Preview", "Paint")
Paint
Window Location ("Normal", "Maximized", "Bottom_left", "Left", "Top_left", "Top", "Top_right", "Right", "Bottom_right", "Bottom", "Screen2_Bottom_left", "Screen2_Left", "Screen2_Top_left", "Screen2_Top", "Screen2_Top_right", "Screen2_Right", "Screen2_Bottom_right", "Screen2_Bottom")
Maximized
Textboxes text color (System.Drawing.Color)
White
Textboxes color
Black
Description color
Cyan
Font name (it must be installed on your system)
NintendoP-NewRodin DB
Encoding number (internally named GdiCharSet, see https://docs.microsoft.com/en-us/dotnet/api/system.drawing.font.gdicharset?view=dotnet-plat-ext-6.0)
128
CMPR Hover Colour
White
CMPR Hover colour Checkbox {"True", "False"}
False
CMPR Update Preview {"True", "False"}
True
Update Preview for Textboxes {"True", "False"}
True
Auto Update Preview {"True", "False"}
True
Upscale Preview {"True", "False"}
True
bmd {"True", "False"}
False
bti {"True", "False"}
False
tex0 {"True", "False"}
False
tpl {"True", "False"}
False
bmp {"True", "False"}
False
png {"True", "False"}
False
jpg {"True", "False"}
False
jpeg {"True", "False"}
False
gif {"True", "False"}
False
ico {"True", "False"}
False
tif {"True", "False"}
False
tiff {"True", "False"}
False
ask exit {"True", "False"}
False
32-bit bmp {"True", "False"}
False
FORCE ALPHA {"True", "False"}
False
funky {"True", "False"}
False
name string {"True", "False"}
False
random palette {"True", "False"}
False
reverse x-axis {"True", "False"}
False
reverse y_axis {"True", "False"}
False
safe mode {"True", "False"}
False
stfu {"True", "False"}
False
warn {"True", "False"}
False


yeah, I decided to implement my own markdown again.
"\a" = %appdata%
"\b" = sets the current label's text to bold
"\c Cyan " makes the text of the current label be Cyan. - put "quotes" around the colour name if it has spaces
"\d" = depth of input_file
"\e" = executable name
"\f default " font name of the current label - put "quotes" around the font name if it has spaces
"\g 128 " = GdiCharSet of the current label 
"\h" = height of the window
"\i" = set current label's text to italic
"\j" = jump to the next label - can't be the same line as the one you're on (else an override occurs and previous text can't be seen)
"\k" = knit a strikeout text style
"\l" = Layout name that you're browsing
"\m" = mipmaps number
"\n" = new line
"\o" = output file name
"\p" = path of the executable (execPath, full path to the folder )
"\q Point " = query a font size unit for current label 
"\r" = r carriage return
"\s 15 " changes the size of the text in the current label
"\t" = tab
"\u" = underline the whole text of current label
"\v" = Vertical font set to false for current label
"\w" = window width
"\xff" = a byte, can be \xfa, or \x80, whatever hex byte works
"\y" = y-axis block height of selected encoding
"\z" = z-axis block depth of selected encoding
"\0" = 0utputs the x-axis block width of selected encoding


notes: 
colour names are all the ones allowed in System.Drawing.Color
\v (GdiVerticalFont = true by default) see https://docs.microsoft.com/en-us/dotnet/api/system.drawing.font.gdiverticalfont?view=dotnet-plat-ext-6.0
\q values are {"World", "Pixel", "Point", "Inch", "Document", "Milimeter", "Display"}
\g is actually the encoding, 0 is ANSI for example. see https://docs.microsoft.com/en-us/dotnet/api/system.drawing.font.gdicharset?view=dotnet-plat-ext-6.0
if it doesn't have quotes, make markdown with arguments always end with a space (\c \f \g \q \s)
the byte \x00 must always have 2 digits (that way, the program know where it ends, and you don't need to add a ending character after it)


you can use \j 8 times at most in one line of this .txt
this is because labels override each other :/ even though its back is transparent, it won't allow the text of the other label back him to show



edit textures of a bmd file \j \c red (a bmd file must be provided in input_file2)
writes the texture in a bti file
writes the texture in a tex0 file and the palette in a plt0 file
writes the texture in a tpl file
writes the texture in a bmp image
writes the texture in a png image
writes the texture in a jpg image \j \c red (this format doesn't support alpha)
writes the texture in a jpeg image \j \c red (this format doesn't support alpha)
writes the texture in a gif image
writes the texture in a ico image \j \c red (max dimensions of the image are 256x256)
writes the texture in a tif image
writes the texture in a tiff image
option asking you to press enter before the console window disappears in cli mode
when decoding, the program will write a 32-bit bmp in any case \n\n(else I've optimized bit depth to make file size smaller depending while keeping all image data intact)
force your alpha value to be applied even if the input image isn't a 32-bit RGBA image\j\j\c Red(will output a fully transparent image in most cases)
when decoding, will write raw/random data, making a funky result
adds the texture name\jat the end of the file\j\c Red (only use this for importing it into BrawlCrate!)
won't inform the user that he made mistakes
fill the colour palette with random values for CI4, CI8, and CI14x2 formats
output will be horizontally reversed
reverse output vertically
makes the program to never throw any exception (useful when using subprocess.checkoutput in python)
silent mode (with a cool small internal name)
verbose mode (prints the internal variables content and some other text in the console)
activate a block colour when you\jmove your mouse onto the preview.\j\j\c GreenYellow Shortcut: Enter\n\n\n\n\n\n\n\n\n\n\n\n (convert the 2D vector of mouse cursor position into a byte array of a bmp file in the background)
Update the Preview whenever\jthe 4x4 block is edited.\j\jalso update as soon as\jthis option is checked.\j\j\c GreenYellow Shortcut: Ctrl + U
black and white, 4 bit per pixel - no alpha \n(will look bad if your image is colorful)
black and white, 8 bit per pixel - no alpha
black and white, 4 bit per pixel - alpha \n(looks bad, and an alpha value is stored for each pixel)
black and white, 8 bit per pixel - alpha
color, 16 bits per pixel - no alpha \j\c red 5 bits red\j\c green 6 bits green\j\c blue 5 bits blue\j\c Violet  test\j\c pink test2\j\c orange text\j\c purple purple\j\c chartreuse chartreuse\c yellow yellow
color, 16 bits per pixel - smart alpha (1RRR RRGG GGGB BBBB - or - 0AAA RRRR GGGG BBBB)
color, 32 bits per pixel - alpha (this encoding is the only one that isn't lossy)
palette, 4 bits per pixel (CI4 palette has a capacity of 16 colours)
palette, 8 bits per pixel (CI8 palette has a capacity of 256 colours)
palette, 14 bits per pixel (CI14x2\j palette has a capacity of\j 16384 colours)\n\j\j\j\c Red slow to encode, the gui may freeze.
color, DXT1 BC1 2 RGB565 colours\jper 4x4 block + 2 interpolated colours\j(which results in a "4-bit per pixel")\j\j\c LightGreen - use the Paint layout to edit\j\c LightGreen All CMPR textures -\j\jevery pixel with alpha < CMPR Min alpha will be zero, else it's 255
Default CMPR Algorithm (theorytically the best one)
take the most used channel(s), and pick the two colours matching linear interpolation that are the furthest away\nvariant: calculate colours not in the 4x4 block but still in the linear interpolation that could make better results
Take the Most used colour and the furthest away from it for each 4x4 block
An algorithm to convert 24-bit RGB to 8-bit grey.
An algorithm to convert 24-bit RGB to 8-bit grey.
Multiplies each channel by its value in the textbox "Custom RGBA"
Take darkest and lightest colour of each block but ONLY take the second colour if it's used more than CMPR MAX times in the 4x4 block
Make the encoding of CMPR textures to only care about the two most used colours with diversity and percentage parameters
Process all colour couples of the palette and take the one that produces the least "difference" calculated by adding channel differences
a single loop going through colours once and taking the couple that has the most difference with his neighbour
set cmpr max to zero and this is the fastest lossless algorithm to re-encode an image that has gone through the cmpr/dxt1/bc1 process.\n\ntakes the colour composed of the lowest red channel value, lowest blue channel, and lowest green one, no matter if it's not from the same pixel (then take the highest one)
States that the picture has No alpha and that every pixel of RGB5A3 must be 1RRR RRGG GGGB BBBB(used in RGB5A3's smart alpha and for choosing palette encoding if none were selected)
States that the picture has Alpha and that every pixel of RGB5A3 must be 0AAA RRRR GGGG BBBB
Picture has alpha and RGB5A3 can use any of the two options for each pixel
repeats the last pixel horizontally indefinitely when looking out of the texture canvas
paste the whole texture horizontally when looking out of the texture canvas
reverse horizontally each occurence of the texture (used to make textures with twice the width stored in half the size)
repeats the last pixel vertically indefinitely when looking out of the texture canvas
paste the whole texture vertically when looking out of the texture canvas
reverse vertically each occurence of the texture (used to make textures with twice the height stored in half the size)
algorithm for rescaling the texture when you're going far away from it in-game
algorithm for rescaling the texture when you're going far away from it in-game
if (scale < mipmap dimensions) { use mipmap and scale it down with the nearest pixel colour; } else {rescale main texture with Nearest Neighbour;}
if (scale < mipmap dimensions) { use mipmap and scale it down with linear pixel colour interpolation; } else {rescale main texture with Nearest Neighbour;}
if (scale < mipmap dimensions) { use mipmap and scale it down with the nearest pixel colour; } else {rescale main texture with Linear;}
if (scale < mipmap dimensions) { use mipmap and scale it down with linear pixel colour interpolation; } else {rescale main texture with Linear;}
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
Swap the Red channel with one of your choice
Swap the Green channel with one of your choice
Swap the Blue channel with one of your choice
Swap the Alpha channel with one of your choice
Layout - show everything\jeven if it has no inpact when running\j\j\c GreenYellow Shortcut: F1
Layout - will only display options\jmatching what's selected\j\j\c GreenYellow Shortcut: F2
Layout - Preview the encoded\jor decoded texture\j\j\c GreenYellow Shortcut: F3
Layout - CMPR Image Editor\j\j\c GreenYellow Shortcut: F4
Minimize\j\j\c GreenYellow Shortcut: F10
Maximize\j\j\c GreenYellow Shortcut: F11
Close\j\j\c GreenYellow Shortcut: Escape
Scale the window to the Left\jwith half of your screen's width\j\j\c GreenYellow Shortcut: Alt + 4\j(look at the numpad layout\jfor the reason of this shortcut)
Scale the window to the Upper Left\jCorner with 1/4 screen width\jand 1/2 screen height\j\j\c GreenYellow Shortcut: Alt + 7\j(both 7 and numpad7 keys work)
Scale the window to the Top\jwith half of your screen's height\j\j\c GreenYellow Shortcut: Alt + 8
Scale the window to the Upper Right\jCorner with 1/4 screen width\jand 1/2 screen height\j\j\c GreenYellow Shortcut: Alt + 9
Scale the window to the Right\jwith half of your screen's width\j\j\c GreenYellow Shortcut: Alt + 6
Scale the window to the Lower Right\jCorner of your screen\j\j\c GreenYellow Shortcut: Alt + 3
Scale the window to the Bottom\jof your screen with half\jof your screen's height\j\j\c GreenYellow Shortcut: Alt + 2
Scale the window to the Lower Left\jCorner of your screen\j\j\c GreenYellow Shortcut: Alt + 1
Reset the Window state to 1080p\jand place it on your first screen\j(1080p = 1920x1080)\j\j\c GreenYellow Shortcut: Alt + 5
Scale the window to the Left\jof your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 4\j(Alt Gr = Ctrl + Alt)
Scale the window to the Upper Left\jCorner of your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 7
Scale the window to the Top\jof your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 8
Scale the window to the Upper Right\jCorner of your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 9
Scale the window to the Right\jof your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 6
Scale the window to the Lower Right\jCorner of your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 3
Scale the window to the Bottom\jof your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 2
Scale the window to the Lower Left\jCorner of your Second Screen\j\j\c GreenYellow Shortcut: Alt Gr + 1
Reset the Window state to 1080p\jand place it on your Secobd Screen\j(1080p = 1920x1080)\j\j\c GreenYellow Shortcut: Alt Gr + 5
Double Click to open explorer\j\j\c Violet Must be a CMPR texture\n(bti, tex0, or tpl)
Double Click to open explorer\j\j\c salmon if input file is a texture,\jit will be decoded.\j\jif input file is a picture, it will be encoded
Double Click to open explorer\j\c coral can be a palette (picture, plt0),\j\c coral a bmd (replace a texture with input file),\j or a tpl (to append the texture to)
Double Click to open explorer\jName of the output file
Double Click to open explorer\jName of the output file\j\j(without extension, because you have to check the extension yourself)
Mipmap Currently Displayed.
Number of mipmaps\n\n(these are 'thumbnails' of the texture, with half the witdh and half the height. this is why "dimensions should be power of 2" is a thing)
Number of most used colours the tool should take of in each 4x4 block
Threshold. every pixel with an alpha value below it are set to zero -> transparent (strict inferior), otherwise alpha is set to 255\n\n
Number of colours in the palette \n\n(if you want to use less than the max capacity)
for every byte trimmed to 3-bit \nif the trimmed bits are greater than this value, the third bit is rounded up
for every byte trimmed to 4-bit \nif the trimmed bits are greater than this value, the fourth bit is rounded up
for every byte trimmed to 5-bit \nif the trimmed bits are greater than this value, the fifth bit is rounded up
for every byte trimmed to 6-bit \nif the trimmed bits are greater than this value, the sixth bit is rounded up
the minimum amount of difference that at least one colour channel must have (compared to all colours of the colour palette)
the minimum amount of difference that at least one colour channel must have on the second loop of colour indexing (compared to all colours of the colour palette)\n\nthe second loop is triggered when the colour palette is not full after the first loop
when the next most used colour has a percentage of occurence less than this value, trigger the second loop.
when the next most used colour has a percentage of occurence less than this value, trigger the last loop which will fill the palette with most used colours without duplicates.
the red channel of each pixel will be multiplied by this value
the green channel of each pixel will be multiplied by this value
the blue channel of each pixel will be multiplied by this value
the alpha channel of each pixel will be multiplied by this value
Black and white palette format with 1 byte of alpha and 1 byte of grey per colour
Coloured palette with 16 bits per colour - no alpha
Coloured palette with smart alpha, 16 bits per colour
Mario Sports Mix Community\n discord server
Github Releases Tab
Yosh's Youtube Channel
Toogle the Alpha Category
Toogle the Algorithm Category
Toogle the WrapS Category
Toogle the WrapT Category
Toogle the Minification Filter Category
Toogle the Magnification Filter Category
Toogle the RGBA Channel Category
Toogle the Palette Category
Toogle the CMPR Category
Toogle the Options Category
The version of this tool
full command if you wanted to run the app with the current parameters from a command line
Launch the application\j\j\c GreenYellow Shortcut: Ctrl + R
The output text after you click on >Run
Allow the app to be moved by dragging the background
Move this window
Resize this window
Refresh the preview\j(you can't see this text though)\j\j\c GreenYellow Unless you have a 4k screeeeeen :D\jWelcome to the creew !!!\jnow you can develop with windows.forms
Save the texture to what\jyou've written in output name\j\j\c GreenYellow Shortcut: Ctrl + S
Open a save prompt\j(with the file explorer)\j\j\c GreenYellow Shortcut: Ctrl + Shift + S
Swap Colour1 and Colour2 \j\c MediumVioletRed (toogle transparency)
Swap Colour1 and Colour2 \jbut doesn't swap the indexes\jin the 4x4 block\j\c MediumVioletRed (toogle transparency)
This is a palette.\n\nClick to change one of the 4 colours
hold Mouse wheel down on any pixel of the Selected Block to assign it to Colour 1
hold Right Click down on any pixel of the Selected Block to assign it to Colour 2
hold Forward Button \j\c DarkTurquoise (located on the side of gaming mouses)\j\c Coral down on any pixel of the Selected Block to assign it to Colour 3
hold Backward Button \j\c DarkTurquoise (located on the side of gaming mouses)\j\c MediumAquamarine down on any pixel of the Selected Block to assign it to Colour 4
hold Left Click down on any pixel of\jthe Selected Block to assign it to the\jcolour you see \j\j\c Orange (the one you've selected)
Click on any of the 4 colours to Select it.\n\n(this will bind left click to this colour when you click on any pixel of the Selected Block)
the first rgb565 colour\jof the selected 4x4 block\j\j\c GreenYellow Shortcut to select it: Ctrl + 1
the second rgb565 colour\jof the selected 4x4 block\j\j\c GreenYellow Shortcut to select it: Ctrl + 2
third colour \j\j\c red it is interpolated,\j\c red you can't edit it directly\j\j\c GreenYellow Shortcut to select it: Ctrl + 3
fourth colour \j\j\c red it is interpolated,\j\c red you can't edit it directly\j\j\c GreenYellow Shortcut to select it: Ctrl + 4
will select a 4x4 block\jwhen you click on the preview picture\j\j\c GreenYellow Shortcut: press Control Key
will pick a colour\jwhen you click on a pixel\jof the preview picture\j\j\c GreenYellow Shortcut: Hold Control Key
\c orange colour trimmed to RGB565
\c green -> Mouse Wheel Click
\c green -> Right Click
\c green -> Forward Button
\c green -> Backward Button
\c green -> Left Click
\c red Input file is not a CMPR texture
\c yellow no. I told you already. You can't directly change Colour 3 or 4 
\c white Sir, have you every wondered why there's no "A" in "RGB565" ?
\c Turquoise saved \o
\c AliceBlue save failed\n\o is used by another process
(1, 1)
(1, 2)
(1, 3)
(1, 4)
(2, 1)
(2, 2)
(2, 3)
(2, 4)
(3, 1)
(3, 2)
(3, 3)
(3, 4)
(4, 1)
(4, 2)
(4, 3)
(4, 4)
color, 16 bits per pixel - no alpha \j\c red 5 bits red\j\c green 6 bits green\j\c blue 5 bits blue\j\c Violet  test\j\c pink test2\j\c orange text\j\c purple purple\j\c chartreuse chartreuse\c yellow yellow
Hello \u ! you found an easter egg lol \n\ndid you know most apps have a folder in \a ?\j\j\j\n\n\c Red this one doesn't though. I prefer using local files.
this is padding data to alignment. (meme)
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.
this is padding data to alignment.