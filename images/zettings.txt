plt0 config v1.0
Layout (change next line with one of these: "All", "Auto", "Preview", "Paint")
All
Window Location ("Normal", "Maximized", "Bottom_left", "Left", "Top_left", "Top", "Top_right", "Right", "Bottom_right", "Bottom")
Maximized
Textboxes text color (System.Drawing.Color)
White
Textboxes color
Black
Description color
Cyan








writes a bmd file (a bmd file must be provided in input_file2)
writes the texture in a bti file
writes the texture in a tex0 file and the palette in a plt0 file
writes the texture in a tpl file
writes the texture in a bmp image
writes the texture in a png image
writes the texture in a jpg image (this format doesn't support alpha))
writes the texture in a jpeg image (this format doesn't support alpha)
writes the texture in a gif image
writes the texture in a ico image (max dimensions of the image are 256x256)
writes the texture in a tif image
writes the texture in a tiff image
option asking you to press enter before the console window disappears in cli mode
when decoding, the program will write a 32-bit bmp in any case (else I've optimized bit depth to make file size smaller depending while keeping all image data intact)
force your alpha value to be applied even if the input image isn't a 32-bit RGBA image (will output a fully transparent image in most cases)
when decoding, will write raw data, making a funky result
won't inform the user that he made mistakes
fill the colour palette with random values for CI4, CI8, and CI14x2 formats
I have nothing more to describe here, output will be vertically and horizontally reversed
makes the program to never throw any exception (useful when using subprocess.checkoutput in python)
silent mode (with a cool small internal name)
verbose mode (prints the internal variables content and some other text in the console)
black and white, 4 bit per pixel - no alpha (will look bad if your image is colorful)
black and white, 8 bit per pixel - no alpha
black and white, 4 bit per pixel - alpha (looks bad, and an alpha value is stored for each pixel)
black and white, 8 bit per pixel - alpha
color, 16 bits per pixel - no alpha (5 bits red, 6 bits green, 5 bits blue)
color, 16 bits per pixel - smart alpha (1RRR RRGG GGGB BBBB - or - 0AAA RRRR GGGG BBBB)
color, 32 bits per pixel - alpha (this encoding is the only one that isn't lossy)
palette, 4 bits per pixel (CI4 palette has a capacity of 16 colours)
palette, 8 bits per pixel (CI8 palette has a capacity of 256 colours)
palette, 14 bits per pixel (CI14x2 palette has a capacity of 16384 colours)
color, 2 RGB565 colours per 4x4 block + 2 interpolated colours\n (which results in a "4-bit per pixel") - use the Paint layout to edit CMPR textures - default algorithm cares about CMPR Max colours in each 4x4 block and every pixel with alpha < CMPR Min alpha will be zero, else it's 255
An algorithm to convert 24-bit RGB to 8-bit grey.
An algorithm to convert 24-bit RGB to 8-bit grey.
Multiplies each channel by its value in the textbox "Custom RGBA"
Make the encoding of CMPR textures to only care about the two most used colours with diversity and percentage parameters
States that the picture has No alpha and that every pixel of RGB5A3 must be 1RRR RRGG GGGB BBBB(used in RGB5A3's smart alpha and for choosing palette encoding if none were selected)
States that the picture has Alpha and that every pixel of RGB5A3 must be 0AAA RRRR GGGG BBBB
Picture has alpha and RGB5A3 can use any of the two options for each pixel
repeats the last pixel horizontally indefinitely when looking out of the texture canvas
paste the whole texture horizontally when looking out of the texture canvas
reverse horizontally each occurence of the texture (used to make textures with twice the width stored in half the size)
repeats the last pixel vertically indefinitely when looking out of the texture canvas
paste the whole texture vertically when looking out of the texture canvas
reverse vertically each occurence of the texture (used to make textures with twice the height stored in half the size)
algorithm for rescaling the texture when you're going far away from it in-game
algorithm for rescaling the texture when you're going far away from it in-game
if (scale < mipmap dimensions) { use mipmap and scale it down with the nearest pixel colour; } else {rescale main texture with Nearest Neighbour;}
if (scale < mipmap dimensions) { use mipmap and scale it down with linear pixel colour interpolation; } else {rescale main texture with Nearest Neighbour;}
if (scale < mipmap dimensions) { use mipmap and scale it down with the nearest pixel colour; } else {rescale main texture with Linear;}
if (scale < mipmap dimensions) { use mipmap and scale it down with linear pixel colour interpolation; } else {rescale main texture with Linear;}
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
algorithm for rescaling the texture when you're approaching it in-game
Swap the Red channel with one of your choice
Swap the Green channel with one of your choice
Swap the Blue channel with one of your choice
Swap the Alpha channel with one of your choice
Toogle the Alpha Category
Toogle the Algorithm Category
Toogle the WrapS Category
Toogle the WrapT Category
Toogle the Minification Filter Category
Toogle the Magnification Filter Category
Layout - show everything even if it has no inpact when running
Layout - will only display options matching what's selected
Layout - Preview the encoded/decoded texture
Layout - CMPR Image Editor
Minimize
Maximize
Close
Scale the window to the left with half of your screen's width (implementation of win + left arrow)
Scale the window to the Upper Left Corner with 1/4 screen width and 1/2 screen height (win + left arrow then win + up arrow)
Scale the window to the top with half of your screen's height (no native shortcut)
Scale the window to the Upper Right Corner with 1/4 screen width and 1/2 screen height
Scale the window to the Right with half of your screen's width 
Scale the window to the Lower Right Corner of your screen
Scale the window to the Bottom of your screen with half of your screen's height
Scale the window to the Lower Left Corner of your screen
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121